# app/api/routes/report.py

from io import BytesIO
from datetime import datetime
from typing import List
from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.concurrency import run_in_threadpool
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
import markdown
from app.models.ufdrfile import UFDRFile
from app.models.artifact import Artifact
from app.models.user import User
from app.core.deps import get_db, get_current_user
from app.core.llm import ask_llm_cached

import pdfkit
from jinja2 import Template
import os

router = APIRouter(prefix="/report", tags=["report"])


# -------------------- HTML → PDF generator --------------------
def generate_pdf(ufdr, artifacts, ai_summary, logo_path=None):
    """Generate styled HTML report and convert to PDF using wkhtmltopdf."""
    html_template = Template("""
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <style>
        @page {
          @bottom-center {
            content: "Cognis | Confidential Report";
            font-size: 9pt;
            color: #aaa;
          }
        }

        body { font-family: Arial, sans-serif; margin: 40px; color: #222; }
        header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px; }
        header img { height: 60px; }
        h1 { text-align: center; color: #003366; }
        h2 { color: #004080; margin-top: 25px; border-bottom: 1px solid #ddd; padding-bottom: 5px; }
        p, td, th { font-size: 11pt; line-height: 1.4; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { border: 1px solid #ccc; padding: 6px 8px; vertical-align: top; word-wrap: break-word; }
        th { background-color: #f2f2f2; }
        footer { position: fixed; bottom: 10px; width: 100%; text-align: center; font-size: 9pt; color: #999; }
        .meta { background: #f9f9f9; padding: 10px; border-radius: 6px; }
        .watermark {
          position: fixed; bottom: 45%; left: 20%;
          font-size: 70px; color: rgba(230,230,230,0.4);
          transform: rotate(-30deg); z-index: -1;
          font-weight: bold;
        }
        .summary {
          background: #f9f9f9;
          padding: 12px 18px;
          border-left: 4px solid #004080;
          border-radius: 5px;
          line-height: 1.5;
        }
      </style>

    </head>
    <body>
      <div class="watermark">COGNIS</div>

      <header>
        <div style="display:flex; align-items:center; justify-content:space-between;">
          {% if logo_path %}<img src="{{ logo_path }}" alt="Cognis Logo" style="height:70px;">{% endif %}
          <h1 style="text-align:center; flex-grow:1;">Cognis Forensic Report</h1>
        </div>
      </header>

      <div class="meta">
        <p><b>Case ID:</b> {{ ufdr.case_id or 'N/A' }}<br>
           <b>Uploaded By:</b> {{ ufdr.meta.uploaded_by if ufdr.meta and ufdr.meta.uploaded_by else 'N/A' }}<br>
           <b>Filename:</b> {{ ufdr.filename or 'N/A' }}<br>
           <b>Uploaded At:</b> {{ ufdr.uploaded_at or 'N/A' }}<br>
           <b>Generated On:</b> {{ generated_on }}</p>
      </div>

      <h2>AI Summary</h2>
      <div class="summary">
         {{ ai_summary | safe if ai_summary else 'No AI summary generated.' }}
      </div>
      <h2>Artifact Summary</h2>
      {% if artifacts %}
        <table>
          <tr><th>#</th><th>Type</th><th>Created At</th><th>Snippet</th></tr>
          {% for art in artifacts[:150] %}
          <tr>
            <td>{{ loop.index }}</td>
            <td>{{ art.type or 'unknown' }}</td>
            <td>{{ art.created_at or 'N/A' }}</td>
            <td>{{ (art.extracted_text or '')[:300] }}</td>
          </tr>
          {% endfor %}
        </table>
      {% else %}
        <p>No artifacts available.</p>
      {% endif %}

      <footer>Generated by Cognis © 2025 | Confidential Report</footer>
    </body>
    </html>
    """)

    ai_summary_html = markdown.markdown(ai_summary)
    html = html_template.render(
        ufdr=ufdr,
        artifacts=artifacts,
        ai_summary=ai_summary_html,
        generated_on=datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC"),
        logo_path=logo_path
    )

    options = {
        "enable-local-file-access": "",
        "encoding": "UTF-8",
        "quiet": "",
        "page-size": "A4",
        "margin-top": "20mm",
        "margin-bottom": "20mm",
        "margin-left": "15mm",
        "margin-right": "15mm",
    }

    pdf_bytes = pdfkit.from_string(html, False, options=options)
    return pdf_bytes


# -------------------- FastAPI endpoint --------------------
@router.get("/{ufdr_id}")
async def generate_forensic_report(
    ufdr_id: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    """Endpoint to generate Cognis Forensic PDF Report."""
    # 1️⃣ Fetch UFDR file
    stmt = select(UFDRFile).where(UFDRFile.id == ufdr_id)
    res = await db.execute(stmt)
    ufdr = res.scalar_one_or_none()
    if not ufdr:
        raise HTTPException(status_code=404, detail="UFDR not found")

    # 2️⃣ Fetch artifacts
    a_stmt = select(Artifact).where(Artifact.ufdr_file_id == ufdr.id)
    a_res = await db.execute(a_stmt)
    artifacts = a_res.scalars().all()

    # 3️⃣ Generate AI summary (cached)
    artifact_counts = {}
    for a in artifacts:
        artifact_counts[a.type or "unknown"] = artifact_counts.get(a.type or "unknown", 0) + 1

    prompt = (
        f"Summarize forensic evidence from UFDR file '{ufdr.filename}'.\n"
        f"Artifact counts: {artifact_counts}\n"
        f"Highlight communication patterns, financial activity, and anomalies."
    )

    ai_summary = await ask_llm_cached(str(ufdr.id), "forensic_summary", prompt)

    # 4️⃣ Path to Cognis logo (optional)
    logo_path = os.path.abspath("app/static/logo.png")
    if not os.path.exists(logo_path):
        logo_path = None  # fallback if logo missing

    # 5️⃣ Generate PDF in background
    pdf_bytes = await run_in_threadpool(generate_pdf, ufdr, artifacts, ai_summary, logo_path)

    # 6️⃣ Stream it back as a downloadable file
    headers = {"Content-Disposition": f"attachment; filename=cognis_report_{ufdr.id}.pdf"}
    return StreamingResponse(BytesIO(pdf_bytes), media_type="application/pdf", headers=headers)
